/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package rtttl2gcode;

import java.awt.event.KeyEvent;
import java.io.File;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import javax.swing.SwingUtilities;

/**
 *
 * @author hexman
 */
public class MainUI extends javax.swing.JFrame {

    /**
     * Creates new form MainUI
     */
    public MainUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        InputFileList = new javax.swing.JList();
        AddButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        OutputFolderTxt = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        OpenFolder = new javax.swing.JButton();
        ClearListBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        InputFileList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        InputFileList.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                InputFileListKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                InputFileListKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                InputFileListKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(InputFileList);

        AddButton.setText("Add Input Files");
        AddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddButtonActionPerformed(evt);
            }
        });

        jLabel2.setText("Output Folder:");

        OutputFolderTxt.setText("F:\\Xchange\\RingToneGCode\\");
            OutputFolderTxt.setToolTipText("");

            jButton2.setText("Convert!");
            jButton2.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    jButton2ActionPerformed(evt);
                }
            });

            OpenFolder.setText("Open Folder");
            OpenFolder.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    OpenFolderActionPerformed(evt);
                }
            });

            ClearListBtn.setText("Clear List");
            ClearListBtn.addActionListener(new java.awt.event.ActionListener() {
                public void actionPerformed(java.awt.event.ActionEvent evt) {
                    ClearListBtnActionPerformed(evt);
                }
            });

            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
            getContentPane().setLayout(layout);
            layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(OutputFolderTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(OpenFolder, javax.swing.GroupLayout.DEFAULT_SIZE, 96, Short.MAX_VALUE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(ProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(jButton2))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addGap(0, 0, Short.MAX_VALUE)
                            .addComponent(AddButton)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(ClearListBtn)
                            .addGap(6, 6, 6)))
                    .addContainerGap())
            );
            layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(AddButton)
                        .addComponent(ClearListBtn))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(OutputFolderTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(OpenFolder))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            );

            pack();
        }// </editor-fold>//GEN-END:initComponents

    private void AddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddButtonActionPerformed
        JFileChooser chooser = new JFileChooser();
        chooser.setMultiSelectionEnabled(true);
        int choice = chooser.showOpenDialog(this);
        if (choice != JFileChooser.APPROVE_OPTION)
        {
            return;
        }
        File[] files = chooser.getSelectedFiles();

        DefaultListModel<String> model = new DefaultListModel<String>();
        InputFileList.setModel(model);
        for( int i = 0; i < files.length; i++)
        {
            model.addElement(files[i].getPath());
        }
    }//GEN-LAST:event_AddButtonActionPerformed

    private void OpenFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenFolderActionPerformed
        JFileChooser chooser = new JFileChooser(); 
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Select of folder for the output Gcode Files");
        chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        chooser.setAcceptAllFileFilterUsed(false);
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) 
        {
            this.OutputFolderTxt.setText(chooser.getSelectedFile().getPath() + "\\");
        } 
    }//GEN-LAST:event_OpenFolderActionPerformed

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        this.InputFileList.setModel(new DefaultListModel<String>() );
    }//GEN-LAST:event_formWindowOpened

    private void ExecuteBatch(String OutputFolderTxt,ListModel model )
    {
        File outputFolder = new File(OutputFolderTxt);
        if(outputFolder.exists() == false || outputFolder.isDirectory() == false)
        {
            JOptionPane.showMessageDialog(this,
                                          "Error: Output Folder doesn't exist",
                                          "Invalid Output Path",
                                          JOptionPane.ERROR_MESSAGE);
            return;
        }
        ConsoleLogger logger = new ConsoleLogger();
        for(int i = 0; i < model.getSize(); i++)
        {
            File currentFile = new File(model.getElementAt(i).toString());
            if( currentFile.exists() == false)
            {
                JOptionPane.showMessageDialog(this,
                                          "Error: Input file " + currentFile.getPath() + " doesn't exist! Skipping",
                                          "Invalid Input Path",
                                          JOptionPane.WARNING_MESSAGE);
                continue;
            }
            if( currentFile.canRead() == false)
            {
                JOptionPane.showMessageDialog(this,
                                          "Error: Cannot read Input file " + currentFile.getPath() + "! Skipping",
                                          "Read access denied",
                                          JOptionPane.WARNING_MESSAGE);
            }
            String inputFilepath = currentFile.getPath();
            String OutputFilepath = outputFolder.getPath() + File.separatorChar + currentFile.getName().replaceFirst("[.][^.]+$", "") + ".gcode";
            logger.Info("Processing input file " + inputFilepath);
            if(Converter.convertFile(inputFilepath, OutputFilepath, logger) == false)
            {
                JOptionPane.showMessageDialog(this,
                                          "Error: Input file " + currentFile.getPath() + " Could not be converted properly. Skipping",
                                          "Convertion failed",
                                          JOptionPane.WARNING_MESSAGE);
            }
            final int progressValue = i;
            UpdateProgress((int)(progressValue * 100/model.getSize()));
        }
        UpdateProgress(100);
        JOptionPane.showMessageDialog(this,
                                          "Convertion Done!",
                                          "Finish",
                                          JOptionPane.INFORMATION_MESSAGE);
    }
    
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        
        Thread RunJob = new Thread() 
        {
            public void run() {
              ExecuteBatch(OutputFolderTxt.getText(),InputFileList.getModel());
            }
        };
        RunJob.start();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void InputFileListKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_InputFileListKeyTyped
        
    }//GEN-LAST:event_InputFileListKeyTyped

    private void InputFileListKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_InputFileListKeyReleased
        if(evt.getKeyCode() == KeyEvent.VK_DELETE)
        {
            try
            {
                if( InputFileList.getSelectedIndex() >= 0)
                {
                    ((DefaultListModel)this.InputFileList.getModel()).remove(InputFileList.getSelectedIndex());
                }
            }
            catch(Exception ex)
            {
                
            }
        }
    }//GEN-LAST:event_InputFileListKeyReleased

    private void ClearListBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearListBtnActionPerformed
        ((DefaultListModel)this.InputFileList.getModel()).clear();
    }//GEN-LAST:event_ClearListBtnActionPerformed

    private void InputFileListKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_InputFileListKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_InputFileListKeyPressed

    private void UpdateProgress(final int Percentage)
    {
        SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                    // Remember to make pbar final variable.
                    ProgressBar.setValue(Percentage);
                    ProgressBar.setStringPainted(true);
                }
            });
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddButton;
    private javax.swing.JButton ClearListBtn;
    private javax.swing.JList InputFileList;
    private javax.swing.JButton OpenFolder;
    private javax.swing.JTextField OutputFolderTxt;
    private final javax.swing.JProgressBar ProgressBar = new javax.swing.JProgressBar();
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
